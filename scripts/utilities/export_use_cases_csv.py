import csv
from pathlib import Path


def join_steps(steps):
    if not steps:
        return ""
    # Join steps with semicolons; replace line breaks to keep CSV compact
    return "; ".join(s.replace("\n", " ").strip() for s in steps)


def main():
    output_path = Path("UseCases.csv")

    fieldnames = [
        "ID",
        "Name",
        "Description",
        "Actors",
        "Preconditions",
        "Postconditions",
        "StandardProcess",
        "AlternativeProcess",
    ]

    # 全量导出：UC1-UC50
    data = [
        {
            "ID": "UC1",
            "Name": "System Startup",
            "Description": "Initialize FastAPI app, load models, init DB, start alert system",
            "Actors": "System",
            "Preconditions": "Server environment configured; Models available; MongoDB reachable",
            "Postconditions": "API running; Models loaded; WebSocket ready",
            "StandardProcess": join_steps([
                "Start backend service",
                "Load ML models (Kitsune/AE/LSTM/CNN/RF as available)",
                "Initialize MongoDB connection",
                "Initialize AlertManager and websockets",
                "Expose REST and WebSocket endpoints",
            ]),
            "AlternativeProcess": join_steps([
                "Model load failure: Log error; Continue with available models",
                "DB connection failure: Retry; If persists, run in degraded mode",
            ]),
        },
        {
            "ID": "UC2",
            "Name": "User Registration",
            "Description": "Register a new user and send OTP via email",
            "Actors": "Guest",
            "Preconditions": "Registration endpoint enabled; Email service configured",
            "Postconditions": "User created with pending verification; OTP sent",
            "StandardProcess": join_steps([
                "Submit username/email/password",
                "Validate input and uniqueness",
                "Hash password",
                "Create user (unverified)",
                "Generate OTP and email to user",
            ]),
            "AlternativeProcess": join_steps([
                "Email already used: Return error; Ask to login or reset",
                "Email send failure: Log; Allow resend later",
            ]),
        },
        {
            "ID": "UC3",
            "Name": "Verify Registration OTP",
            "Description": "Verify email ownership using OTP",
            "Actors": "New User",
            "Preconditions": "User registered; OTP valid and not expired",
            "Postconditions": "User verified and activated",
            "StandardProcess": join_steps([
                "User submits OTP",
                "Validate OTP correctness and expiry",
                "Mark user as verified",
            ]),
            "AlternativeProcess": join_steps([
                "OTP invalid/expired: Return error; Offer resend",
            ]),
        },
        {
            "ID": "UC4",
            "Name": "Login",
            "Description": "Authenticate user and issue JWT",
            "Actors": "User",
            "Preconditions": "User exists and verified; Correct credentials",
            "Postconditions": "JWT access/refresh issued",
            "StandardProcess": join_steps([
                "Submit email and password",
                "Validate credentials",
                "Issue access and refresh tokens",
                "Return user info and tokens",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid credentials: Return error",
                "User not verified: Return error; Offer resend OTP",
            ]),
        },
        {
            "ID": "UC5",
            "Name": "Logout",
            "Description": "Client clears tokens and ends session",
            "Actors": "User",
            "Preconditions": "Logged in on client",
            "Postconditions": "Tokens cleared on client; WebSocket closed",
            "StandardProcess": join_steps([
                "User clicks logout",
                "Client removes tokens",
                "Client closes WebSocket",
                "Redirect to login",
            ]),
            "AlternativeProcess": join_steps([
                "WebSocket already closed: No-op",
            ]),
        },
        {
            "ID": "UC6",
            "Name": "Refresh Token",
            "Description": "Refresh expired access token using refresh token",
            "Actors": "User",
            "Preconditions": "Valid refresh token available",
            "Postconditions": "New access token issued",
            "StandardProcess": join_steps([
                "Client sends refresh token",
                "Validate refresh token",
                "Issue new access token",
            ]),
            "AlternativeProcess": join_steps([
                "Refresh token invalid/expired: Return 401; Redirect to login",
            ]),
        },
        {
            "ID": "UC7",
            "Name": "Request Password Reset",
            "Description": "Initiate password reset and send OTP to email",
            "Actors": "User",
            "Preconditions": "Email exists",
            "Postconditions": "Reset OTP generated and emailed",
            "StandardProcess": join_steps([
                "Submit email",
                "Generate reset OTP",
                "Send OTP via email",
            ]),
            "AlternativeProcess": join_steps([
                "Email not registered: Return generic success to avoid leakage",
                "Email send failure: Log; Allow retry",
            ]),
        },
        {
            "ID": "UC8",
            "Name": "Verify Reset OTP",
            "Description": "Verify OTP for password reset",
            "Actors": "User",
            "Preconditions": "Reset requested; OTP valid",
            "Postconditions": "OTP verified; user can set new password",
            "StandardProcess": join_steps([
                "Submit email and OTP",
                "Validate OTP",
                "Mark OTP as verified",
            ]),
            "AlternativeProcess": join_steps([
                "OTP invalid/expired: Error; Offer resend",
            ]),
        },
        {
            "ID": "UC9",
            "Name": "Reset Password",
            "Description": "Set a new password after OTP verification",
            "Actors": "User",
            "Preconditions": "OTP verified for the email",
            "Postconditions": "Password updated",
            "StandardProcess": join_steps([
                "Submit new password",
                "Validate strength",
                "Hash and store",
                "Confirm reset",
            ]),
            "AlternativeProcess": join_steps([
                "Weak password: Return error",
            ]),
        },
        {
            "ID": "UC10",
            "Name": "View Profile",
            "Description": "Load and display current user's profile",
            "Actors": "User",
            "Preconditions": "Authenticated",
            "Postconditions": "Profile displayed",
            "StandardProcess": join_steps([
                "Request profile",
                "Load from DB",
                "Return profile data",
            ]),
            "AlternativeProcess": join_steps([
                "Profile missing: Return error",
            ]),
        },
        {
            "ID": "UC11",
            "Name": "Subscribe WebSocket",
            "Description": "Establish WebSocket connection for alerts",
            "Actors": "User",
            "Preconditions": "Authenticated; WebSocket endpoint reachable",
            "Postconditions": "Connection established; Subscribed to alerts",
            "StandardProcess": join_steps([
                "Open WebSocket with JWT",
                "Server authenticates connection",
                "Register client in connections",
            ]),
            "AlternativeProcess": join_steps([
                "Auth failed: Close socket",
            ]),
        },
        {
            "ID": "UC12",
            "Name": "Unsubscribe WebSocket",
            "Description": "Close WebSocket and cleanup",
            "Actors": "User",
            "Preconditions": "Active WebSocket session",
            "Postconditions": "Connection closed; Resources freed",
            "StandardProcess": join_steps([
                "Client closes socket",
                "Server removes client from connections",
            ]),
            "AlternativeProcess": join_steps([
                "Already disconnected: No-op",
            ]),
        },
        {
            "ID": "UC13",
            "Name": "Select Network Interface",
            "Description": "Choose NIC for real-time capture",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Authenticated; NIC list retrievable",
            "Postconditions": "Interface selected for detection",
            "StandardProcess": join_steps([
                "List available interfaces",
                "User selects interface",
                "Validate accessibility",
            ]),
            "AlternativeProcess": join_steps([
                "No interfaces: Show message",
                "Permission denied: Suggest elevated rights",
            ]),
        },
        {
            "ID": "UC14",
            "Name": "Select Detection Model",
            "Description": "Choose ML model for detection or testing",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Models loaded",
            "Postconditions": "Model selection stored in session/context",
            "StandardProcess": join_steps([
                "Display available models",
                "User selects model",
                "Apply selection",
            ]),
            "AlternativeProcess": join_steps([
                "Model unavailable: Show error; Keep previous",
            ]),
        },
        {
            "ID": "UC15",
            "Name": "Start Real-time Detection",
            "Description": "Begin packet capture and prediction loop",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Interface selected; Model selected",
            "Postconditions": "Capture loop running",
            "StandardProcess": join_steps([
                "Send start request",
                "Init capture loop",
                "Extract features and predict",
                "Stream results to client",
            ]),
            "AlternativeProcess": join_steps([
                "Interface busy: Return error",
            ]),
        },
        {
            "ID": "UC16",
            "Name": "Stop Real-time Detection",
            "Description": "Stop packet capture loop",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Capture running",
            "Postconditions": "Capture stopped",
            "StandardProcess": join_steps([
                "Send stop request",
                "Terminate loop gracefully",
            ]),
            "AlternativeProcess": join_steps([
                "Not running: No-op",
            ]),
        },
        {
            "ID": "UC17",
            "Name": "Real-time Prediction Pipeline",
            "Description": "Process incoming packets through feature extraction and model",
            "Actors": "System",
            "Preconditions": "Detection running",
            "Postconditions": "Prediction produced for each packet/flow",
            "StandardProcess": join_steps([
                "Capture packet",
                "Extract features",
                "Predict using selected model",
                "Persist results",
            ]),
            "AlternativeProcess": join_steps([
                "Model error: Log and skip packet",
            ]),
        },
        {
            "ID": "UC18",
            "Name": "Trigger Alert",
            "Description": "Generate alert when threat detected and push via WebSocket",
            "Actors": "System",
            "Preconditions": "Prediction indicates threat; Rule matched",
            "Postconditions": "Alert stored and pushed to subscribers",
            "StandardProcess": join_steps([
                "Create Alert entity",
                "Save to DB",
                "Broadcast via WebSocket",
            ]),
            "AlternativeProcess": join_steps([
                "WebSocket none connected: Still store alert",
            ]),
        },
        {
            "ID": "UC19",
            "Name": "View Alerts",
            "Description": "List and paginate alerts",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Authenticated",
            "Postconditions": "Alerts displayed",
            "StandardProcess": join_steps([
                "Request alert list with filters",
                "Query DB",
                "Return paginated results",
            ]),
            "AlternativeProcess": join_steps([
                "No alerts: Return empty list",
            ]),
        },
        {
            "ID": "UC20",
            "Name": "Acknowledge Alert",
            "Description": "Mark alert as acknowledged/resolved",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Alert exists",
            "Postconditions": "Alert status updated",
            "StandardProcess": join_steps([
                "Select alert",
                "Set status to acknowledged/resolved",
                "Persist change",
            ]),
            "AlternativeProcess": join_steps([
                "Alert not found: Error",
            ]),
        },
        {
            "ID": "UC21",
            "Name": "View Reports",
            "Description": "List generated detection reports",
            "Actors": "Analyst; Administrator; Viewer",
            "Preconditions": "Authenticated",
            "Postconditions": "Reports displayed",
            "StandardProcess": join_steps([
                "Request report list",
                "Query DB with filters",
                "Return list",
            ]),
            "AlternativeProcess": join_steps([
                "No data: Return empty list",
            ]),
        },
        {
            "ID": "UC22",
            "Name": "Filter Reports",
            "Description": "Apply filters (time range, type, severity)",
            "Actors": "Analyst; Administrator; Viewer",
            "Preconditions": "Reports exist",
            "Postconditions": "Filtered list returned",
            "StandardProcess": join_steps([
                "Set filters",
                "Query DB",
                "Return filtered results",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid filter: Use defaults",
            ]),
        },
        {
            "ID": "UC23",
            "Name": "Report Details",
            "Description": "Open a single report with entries",
            "Actors": "Analyst; Administrator; Viewer",
            "Preconditions": "Report exists",
            "Postconditions": "Detail displayed",
            "StandardProcess": join_steps([
                "Request by report id",
                "Load from DB",
                "Return details",
            ]),
            "AlternativeProcess": join_steps([
                "Not found: Return 404",
            ]),
        },
        {
            "ID": "UC24",
            "Name": "Export Report PDF",
            "Description": "Export selected report as PDF (if enabled)",
            "Actors": "Analyst; Administrator; Viewer",
            "Preconditions": "Export endpoint available; Report exists",
            "Postconditions": "PDF downloaded",
            "StandardProcess": join_steps([
                "Click export PDF",
                "Generate PDF",
                "Trigger download",
            ]),
            "AlternativeProcess": join_steps([
                "Generation error: Show 'Export failed'",
            ]),
        },
        {
            "ID": "UC25",
            "Name": "Upload PCAP",
            "Description": "Upload a PCAP file for offline analysis",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Authenticated; File within size limits",
            "Postconditions": "PCAP stored temporarily",
            "StandardProcess": join_steps([
                "Choose file and upload",
                "Validate content-type/size",
                "Store in uploads",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid PCAP: Reject upload",
            ]),
        },
        {
            "ID": "UC26",
            "Name": "Analyze PCAP",
            "Description": "Run offline feature extraction and prediction on PCAP",
            "Actors": "Analyst; Administrator",
            "Preconditions": "PCAP uploaded; Model available",
            "Postconditions": "Analysis results saved and viewable",
            "StandardProcess": join_steps([
                "Start analysis request",
                "Extract features",
                "Predict using model",
                "Store results",
                "Return summary",
            ]),
            "AlternativeProcess": join_steps([
                "Parsing error: Stop and return error",
            ]),
        },
        {
            "ID": "UC27",
            "Name": "Download Analysis Results",
            "Description": "Download results of PCAP analysis",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Analysis completed",
            "Postconditions": "File downloaded",
            "StandardProcess": join_steps([
                "Request export (CSV/JSON)",
                "Generate and stream file",
            ]),
            "AlternativeProcess": join_steps([
                "Not ready: Return 202 or message",
            ]),
        },
        {
            "ID": "UC28",
            "Name": "Manual Testing Predict",
            "Description": "Submit feature vector or parameters for model prediction",
            "Actors": "Analyst; Administrator",
            "Preconditions": "Model selected",
            "Postconditions": "Prediction returned and optionally stored",
            "StandardProcess": join_steps([
                "Enter features or upload sample",
                "Send predict request",
                "Run model and return output",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid input: Return validation errors",
            ]),
        },
        {
            "ID": "UC29",
            "Name": "Resolve IP Geolocation",
            "Description": "Resolve source IP to geo with caching",
            "Actors": "System",
            "Preconditions": "IP available",
            "Postconditions": "Geo cached and returned",
            "StandardProcess": join_steps([
                "Check cache",
                "Query ip-api or ipinfo if miss",
                "Store in cache",
                "Return geo",
            ]),
            "AlternativeProcess": join_steps([
                "API failure: Return 'unknown' and log",
            ]),
        },
        {
            "ID": "UC30",
            "Name": "View Geo on Map",
            "Description": "Show geo points for threats on map UI",
            "Actors": "Analyst; Administrator; Viewer",
            "Preconditions": "Geo data exists",
            "Postconditions": "Map with markers displayed",
            "StandardProcess": join_steps([
                "Load geo dataset",
                "Render basemap",
                "Plot markers/clusters",
            ]),
            "AlternativeProcess": join_steps([
                "No data: Show empty map",
            ]),
        },
        {
            "ID": "UC31",
            "Name": "Search Reports",
            "Description": "Allows users to search through reports using various criteria",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated with view_reports permission",
            "Postconditions": "Search results are displayed",
            "StandardProcess": join_steps([
                "User accesses search interface",
                "User enters search query",
                "User selects search criteria",
                "User specifies search scope",
                "User executes search",
                "System processes search request",
                "System queries database",
                "System ranks search results",
                "System displays search results",
                "User reviews search results",
            ]),
            "AlternativeProcess": join_steps([
                "Empty search query: System validates search input; System shows 'Query required'; Prevent search; Return to enter query",
                "No search results: System processes search; Detects no matches; Shows 'No results'; Suggest alternative terms",
            ]),
        },
        {
            "ID": "UC32",
            "Name": "CSV Export",
            "Description": "Allows users to export report data in CSV format",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "Authenticated with export_data permission; Report data available",
            "Postconditions": "Data is exported as CSV file",
            "StandardProcess": join_steps([
                "User selects CSV export option",
                "User applies data filters",
                "User clicks export button",
                "System validates export request",
                "System formats data as CSV",
                "System generates CSV file",
                "System sets filename with timestamp",
                "System triggers file download",
                "System logs export activity",
                "System confirms export success",
            ]),
            "AlternativeProcess": join_steps([
                "Export permission denied: Check permissions; Show 'Export denied'; Prevent export",
                "No data to export: Check data availability; Show 'No data'; Prevent export",
            ]),
        },
        {
            "ID": "UC33",
            "Name": "JSON Export",
            "Description": "Allows users to export report data in JSON format",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "Authenticated with export_data permission; Report data available",
            "Postconditions": "Data is exported as JSON file",
            "StandardProcess": join_steps([
                "User selects JSON export option",
                "User applies data filters",
                "User clicks export button",
                "System validates export request",
                "System formats data as JSON",
                "System generates JSON file",
                "System sets filename with timestamp",
                "System triggers file download",
                "System logs export activity",
                "System confirms export success",
            ]),
            "AlternativeProcess": join_steps([
                "Export permission denied: Check permissions; Show 'Export denied'; Prevent export",
                "JSON formatting error: Attempt formatting; Detect error; Show 'Export failed'; Log error details",
            ]),
        },
        {
            "ID": "UC34",
            "Name": "Map Attack Locations",
            "Description": "Allows system to map and visualize attack locations geographically",
            "Actors": "Security Analyst; System Administrator",
            "Preconditions": "Threat detection is active; Geographic data available",
            "Postconditions": "Attack locations are mapped and displayed",
            "StandardProcess": join_steps([
                "System detects security threat",
                "System extracts IP address",
                "System queries IP geolocation service",
                "System receives geographic coordinates",
                "System maps attack location",
                "System updates threat map",
                "System displays location marker",
                "System logs geographic data",
            ]),
            "AlternativeProcess": join_steps([
                "IP geolocation failed: API error; Log failure; Show 'Location unknown'",
                "Invalid IP address: Validate format; Skip geolocation; Log invalid IP",
            ]),
        },
        {
            "ID": "UC35",
            "Name": "View Threat Map",
            "Description": "Allows users to view geographic threat distribution map",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated; Threat map data exists",
            "Postconditions": "Threat map is displayed and accessible",
            "StandardProcess": join_steps([
                "User accesses threat map interface",
                "System loads geographic data",
                "System displays world map",
                "System overlays threat markers",
                "System shows threat clusters",
                "User interacts with map",
                "System provides map controls",
                "System updates map display",
            ]),
            "AlternativeProcess": join_steps([
                "No threat data: Show 'No threats'; Display empty map; Offer data refresh",
                "Map loading failed: Detect failure; Show 'Map error'; Offer reload",
            ]),
        },
        {
            "ID": "UC36",
            "Name": "IP Geolocation",
            "Description": "Allows system to determine geographic location of IP addresses",
            "Actors": "Security Analyst; System Administrator",
            "Preconditions": "IP address available; Geolocation service accessible",
            "Postconditions": "IP location is determined and stored",
            "StandardProcess": join_steps([
                "System receives IP address",
                "System validates IP format",
                "System checks local cache",
                "System queries geolocation API",
                "System receives location data",
                "System parses coordinates",
                "System stores location in cache",
                "System returns geographic data",
            ]),
            "AlternativeProcess": join_steps([
                "Cache hit: Return cached data; Skip API query; Log cache hit",
                "API query failed: Receive error; Log failure; Return cached data if available",
            ]),
        },
        {
            "ID": "UC37",
            "Name": "Attack Clustering",
            "Description": "Allows system to group similar attacks for pattern analysis",
            "Actors": "Security Analyst; System Administrator",
            "Preconditions": "Multiple attacks detected; Clustering algorithm available",
            "Postconditions": "Attacks are grouped into clusters",
            "StandardProcess": join_steps([
                "System collects attack data",
                "System extracts attack features",
                "System applies clustering algorithm",
                "System groups similar attacks",
                "System calculates cluster centers",
                "System assigns attack labels",
                "System stores cluster information",
                "System displays cluster results",
            ]),
            "AlternativeProcess": join_steps([
                "Insufficient attack data: Detect insufficient data; Show 'Need more data'",
                "Clustering failed: Detect failure; Show 'Clustering failed'; Log details",
            ]),
        },
        {
            "ID": "UC38",
            "Name": "Risk Assessment",
            "Description": "Allows system to assess security risk levels based on threat analysis",
            "Actors": "Security Analyst; System Administrator",
            "Preconditions": "Threat data available; Risk model configured",
            "Postconditions": "Risk levels are calculated and assigned",
            "StandardProcess": join_steps([
                "System analyzes threat data",
                "System calculates threat scores",
                "System applies risk factors",
                "System determines risk levels",
                "System assigns risk categories",
                "System generates risk report",
                "System stores risk assessment",
                "System displays risk summary",
            ]),
            "AlternativeProcess": join_steps([
                "Insufficient threat data: Detect missing data; Show 'Incomplete data'",
                "Risk model error: Detect calculation error; Show 'Assessment failed'; Log details",
            ]),
        },
        {
            "ID": "UC39",
            "Name": "Manage Users",
            "Description": "Allows administrators to manage system users and their accounts",
            "Actors": "System Administrator",
            "Preconditions": "Authenticated with manage_users permission",
            "Postconditions": "User accounts are managed according to administrator actions",
            "StandardProcess": join_steps([
                "User accesses user management interface",
                "System checks user permissions",
                "System loads user list",
                "System displays user information",
                "User performs management actions",
                "System processes user changes",
                "System updates database",
                "System confirms changes",
                "System logs management activities",
            ]),
            "AlternativeProcess": join_steps([
                "Permission denied: Show 'Access denied'; Redirect to dashboard",
                "No users found: Show 'No users'; Offer user creation",
            ]),
        },
        {
            "ID": "UC40",
            "Name": "Profile Management",
            "Description": "Allows users to view and update their profile information",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated; Profile exists",
            "Postconditions": "Profile information is updated",
            "StandardProcess": join_steps([
                "User accesses profile page",
                "System loads user profile",
                "System displays profile form",
                "User reviews current information",
                "User modifies profile fields",
                "User clicks update button",
                "System validates changes",
                "System updates profile",
                "System confirms update",
                "System logs profile changes",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid profile data: Show validation errors; Prevent update",
                "Profile not found: Show error; Redirect to dashboard",
            ]),
        },
        {
            "ID": "UC41",
            "Name": "Create User",
            "Description": "Allows administrators to create new user accounts",
            "Actors": "System Administrator",
            "Preconditions": "Authenticated with manage_users permission",
            "Postconditions": "New user account is created",
            "StandardProcess": join_steps([
                "Access user creation interface",
                "Display user creation form",
                "Enter user details (username, email, password)",
                "Assign user role",
                "Click create button",
                "Validate user data",
                "Check username/email availability",
                "Hash password",
                "Create user account",
                "Assign default permissions",
                "Confirm user creation",
                "Log creation activity",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid user data: Show validation errors; Prevent creation",
                "Username/email exists: Show 'Already exists'; Prevent creation",
            ]),
        },
        {
            "ID": "UC42",
            "Name": "Edit User",
            "Description": "Allows administrators to modify existing user accounts",
            "Actors": "System Administrator",
            "Preconditions": "Authenticated with manage_users permission; Target user exists",
            "Postconditions": "User account is updated",
            "StandardProcess": join_steps([
                "Access user management interface",
                "Select user to edit",
                "Load user information",
                "Display edit form",
                "Modify user details",
                "Update user role",
                "Click update button",
                "Validate changes",
                "Update user account",
                "Confirm update",
                "Log modification",
            ]),
            "AlternativeProcess": join_steps([
                "User not found: Show error; Redirect to user list",
                "Invalid changes: Show error; Prevent update",
            ]),
        },
        {
            "ID": "UC43",
            "Name": "Delete User",
            "Description": "Allows administrators to remove user accounts from the system",
            "Actors": "System Administrator",
            "Preconditions": "Authenticated with manage_users permission; Target user exists",
            "Postconditions": "User account is removed",
            "StandardProcess": join_steps([
                "Access user management interface",
                "Select user to delete",
                "Load user information",
                "Display deletion confirmation",
                "Confirm deletion",
                "Check user dependencies",
                "Remove user account",
                "Clean up user data",
                "Confirm deletion",
                "Log deletion activity",
            ]),
            "AlternativeProcess": join_steps([
                "User not found: Show error; Redirect to user list",
                "User has dependencies: Show 'Cannot delete'; Prevent deletion",
            ]),
        },
        {
            "ID": "UC44",
            "Name": "Role Assignment",
            "Description": "Allows administrators to assign roles and permissions to users",
            "Actors": "System Administrator",
            "Preconditions": "Authenticated with manage_users permission; Roles exist",
            "Postconditions": "User roles and permissions are updated",
            "StandardProcess": join_steps([
                "Access role management interface",
                "Select target user",
                "Display current roles",
                "Review role options",
                "Assign new roles",
                "Set role permissions",
                "Click assign button",
                "Validate role assignment",
                "Update user roles",
                "Confirm assignment",
                "Log role changes",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid role assignment: Show 'Invalid role'; Prevent assignment",
                "Role conflict: Detect conflict; Show 'Role conflict'; Prevent assignment",
            ]),
        },
        {
            "ID": "UC45",
            "Name": "Update Profile",
            "Description": "Allows users to update their personal profile information",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated; Profile exists",
            "Postconditions": "Profile information is updated",
            "StandardProcess": join_steps([
                "Access profile update interface",
                "Load current profile",
                "Display update form",
                "Modify profile fields",
                "Enter new information",
                "Click update button",
                "Validate changes",
                "Update profile",
                "Confirm update",
                "Log profile changes",
            ]),
            "AlternativeProcess": join_steps([
                "Invalid profile data: Show validation errors; Prevent update",
                "Profile not found: Show error; Redirect to dashboard",
            ]),
        },
        {
            "ID": "UC46",
            "Name": "Change Password",
            "Description": "Allows users to change their account password",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated; Current password is known",
            "Postconditions": "User password is updated",
            "StandardProcess": join_steps([
                "Access password change interface",
                "Enter current password",
                "Enter new password",
                "Confirm new password",
                "Click change button",
                "Validate current password",
                "Validate new password strength",
                "Hash new password",
                "Update password",
                "Confirm password change",
                "Log password change",
            ]),
            "AlternativeProcess": join_steps([
                "Current password incorrect: Show error; Prevent change",
                "New password too weak: Show 'Password too weak'; Prevent change",
                "Passwords don't match: Show error; Prevent change",
            ]),
        },
        {
            "ID": "UC47",
            "Name": "Dashboard Overview",
            "Description": "Allows users to view system overview and key metrics",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated; Dashboard data available",
            "Postconditions": "Dashboard is displayed with current information",
            "StandardProcess": join_steps([
                "Access dashboard",
                "Check user permissions",
                "Load dashboard data",
                "Display system overview",
                "Show key metrics",
                "Display recent activities",
                "Show system status",
                "User interacts with dashboard",
                "Update dashboard display",
            ]),
            "AlternativeProcess": join_steps([
                "Permission denied: Show 'Access denied'; Redirect to login",
                "No dashboard data: Show 'No data available'; Display empty dashboard",
            ]),
        },
        {
            "ID": "UC48",
            "Name": "Network Interface Management",
            "Description": "Allows users to view and manage network interfaces for detection",
            "Actors": "Security Analyst; System Administrator",
            "Preconditions": "Authenticated with real_time_detection permission",
            "Postconditions": "Network interfaces managed according to user actions",
            "StandardProcess": join_steps([
                "Access interface management",
                "Discover network interfaces",
                "Display interface list",
                "Show interface details",
                "Review interface information",
                "Select interface for detection",
                "Validate interface selection",
                "Configure interface",
                "Confirm interface setup",
            ]),
            "AlternativeProcess": join_steps([
                "No interfaces available: Show 'No interfaces'; Offer refresh",
                "Interface not accessible: Show 'Access denied'; Suggest elevated privileges",
            ]),
        },
        {
            "ID": "UC49",
            "Name": "Statistics Display",
            "Description": "Allows users to view system statistics and performance metrics",
            "Actors": "Security Analyst; System Administrator; Report Viewer",
            "Preconditions": "User is authenticated; Statistics data available",
            "Postconditions": "Statistics are displayed and accessible",
            "StandardProcess": join_steps([
                "Access statistics interface",
                "Load statistics data",
                "Display performance metrics",
                "Show detection statistics",
                "Display alert statistics",
                "Show user activity statistics",
                "User reviews statistics",
                "Update statistics display",
            ]),
            "AlternativeProcess": join_steps([
                "No statistics data: Show 'No data'; Offer refresh",
                "Statistics loading failed: Show 'Loading failed'; Offer retry",
            ]),
        },
        {
            "ID": "UC50",
            "Name": "Real-time Status",
            "Description": "Allows users to view real-time system status and operations",
            "Actors": "Security Analyst; System Administrator",
            "Preconditions": "User is authenticated; Real-time data available",
            "Postconditions": "Real-time status is displayed and updated",
            "StandardProcess": join_steps([
                "Access real-time status interface",
                "Check system status",
                "Display current operations",
                "Show detection status",
                "Display alert status",
                "Show system health",
                "Update status in real-time",
                "User monitors system status",
            ]),
            "AlternativeProcess": join_steps([
                "System not operational: Show 'System down'; Display error details",
                "No real-time data: Show 'No real-time data'; Offer refresh",
            ]),
        },
    ]

    with output_path.open("w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

    print(f"Wrote {len(data)} use cases to {output_path.resolve()}")


if __name__ == "__main__":
    main()



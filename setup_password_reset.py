#!/usr/bin/env python3
"""
Quick Setup Script for Password Reset Functionality
"""

import os
import sys

def create_env_file():
    """Create .env file"""
    print("üîß Creating environment configuration file...")
    
    if os.path.exists(".env"):
        print("‚ö†Ô∏è  .env file already exists")
        overwrite = input("Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("‚ÑπÔ∏è  Keeping existing .env file")
            return True  # Return True to continue with other setup steps
    
    # Get user input
    print("\nüìß Please enter email server configuration:")
    smtp_server = input("SMTP Server (default: smtp.gmail.com): ").strip() or "smtp.gmail.com"
    smtp_port = input("SMTP Port (default: 587): ").strip() or "587"
    smtp_username = input("Email Username: ").strip()
    smtp_password = input("Email Password/App Password: ").strip()
    from_email = input("Sender Email (default: noreply@pretect-nids.com): ").strip() or "noreply@pretect-nids.com"
    
    if not smtp_username or not smtp_password:
        print("‚ùå Username and password cannot be empty")
        return False
    
    # Create .env file content
    env_content = f"""# Email Configuration for Password Reset
# Generated by setup script

# SMTP Server Settings
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_USERNAME={smtp_username}
SMTP_PASSWORD={smtp_password}
FROM_EMAIL={from_email}
"""
    
    # Write to file
    try:
        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")
        return False

def create_upload_dirs():
    """Create upload directories"""
    print("\nüìÅ Creating upload directories...")
    
    dirs = ["uploads", "uploads/avatars"]
    
    for dir_path in dirs:
        try:
            os.makedirs(dir_path, exist_ok=True)
            print(f"‚úÖ Created directory: {dir_path}")
        except Exception as e:
            print(f"‚ùå Failed to create directory {dir_path}: {e}")
            return False
    
    return True

def show_next_steps():
    """Show next steps"""
    print("\nüéØ Setup complete! Next steps:")
    print("\n1. Test email configuration:")
    print("   python test_email.py")
    
    print("\n2. Start backend service:")
    print("   cd app")
    print("   python -m uvicorn main:app --reload --host 0.0.0.0 --port 8000")
    
    print("\n3. Start frontend service:")
    print("   cd dashboard")
    print("   npm run dev")
    
    print("\n4. Access application:")
    print("   Frontend: http://localhost:3000")
    print("   Backend: http://localhost:8000")
    
    print("\nüí° Tips:")
    print("- If using Gmail, ensure 2FA is enabled and app password is generated")
    print("- Check firewall settings to ensure ports 8000 and 3000 are accessible")
    print("- See PASSWORD_RESET_SETUP.md for detailed configuration instructions")

def main():
    """Main function"""
    print("üöÄ PreTect-NIDS Password Reset Functionality Setup Wizard")
    print("=" * 50)
    
    # Check Python version
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 or higher required")
        return
    
    # Create .env file
    if not create_env_file():
        return
    
    # Create upload directories
    if not create_upload_dirs():
        return
    
    # Show next steps
    show_next_steps()
    
    print("\nüéâ Setup complete!")

if __name__ == "__main__":
    main()
